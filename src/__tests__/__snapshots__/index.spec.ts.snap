// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[` 1`] = `"	test Example"`;

exports[` 2`] = `"	test Example?"`;

exports[` 3`] = `"	test Example @default(Foo)"`;

exports[` 4`] = `"	test Example? @default(Foo)"`;

exports[`refract enum block generation should generate an enum 1`] = `
"enum Example {
	Qux
	// This is a comment
	Foo
	Bar @map(\\"Baz\\")
}"
`;

exports[`refract enum block generation should generate an enum with a comment 1`] = `
"// An Enum with a comment
enum Example {
	Qux
	// This is a comment
	Foo
	Bar @map(\\"Baz\\")
}"
`;

exports[`refract should generate the schema 1`] = `
"// refract https://github.com/cwqt/refract - generated in x ms -----------------
// datasource ----------------------------------------------------------------------

datasource db {
	url                   = env(\\"DATABASE_URL\\")
	provider              = \\"mysql\\"
	shadowDatabaseUrl     = env(\\"DATABASE_SHADOW_URL\\")
	referentialIntegrity  = \\"prisma\\"
}

// generators ----------------------------------------------------------------------

generator client {
	provider         = \\"prisma-client-js\\"
	binaryTargets    = [\\"native\\",\\"rhel-openssl-1.0.x\\",\\"linux-arm64-openssl-1.0.x\\",\\"darwin-arm64\\"]
	previewFeatures  = [\\"referentialIntegrity\\"]
}

// enums ---------------------------------------------------------------------------

// This is the Role Enum
enum Role {
	// This is the admin role
	ADMIN @map(\\"admin\\")
	USER @map(\\"user\\")
	// This is the owner role
	OWNER @map(\\"owner\\")
}

enum Foo {
	Bar
	Baz
}

// types ---------------------------------------------------------------------------

type Profile {
	fullname  String
	bio       String
}

// models --------------------------------------------------------------------------

// This is the User model
model User {
	id               Int        @id @default(autoincrement()) @map(\\"_id\\") @db.Value('foo')
	email            String     @unique @db.VarChar(4)
	name             String?
	// The user model
	height           Float      @default(1.8)
	role             Role?      @default(USER)
	foo              Foo
	bar              Foo?
	profile          Profile?
	// Relations are cool
	posts            Post[]     @relation(\\"WrittenPosts\\")
	pinned           Post?      @relation(\\"PinnedPost\\")
	createdAt        DateTime   @default(now())
	updatedAt        DateTime   @updatedAt @db.Date(6)
	@@index([mixin, index])
}

model Post {
	id                 Int       @id @default(autoincrement()) @db.UnsignedSmallInt
	published          Boolean   @default(false)
	title              String
	authorId           Int?
	author             User?     @relation(\\"WrittenPosts\\", fields: [authorId], references: [id], onUpdate: Restrict, onDelete: SetNull)
	pinnedById         Int?
	pinnedBy           User?     @relation(\\"PinnedPost\\", fields: [pinnedById], references: [id])
	stars              Star[]
	createdAt          DateTime  @default(now())
	updatedAt          DateTime  @updatedAt @db.Date(6)
	@@index([mixin, index])
	@@map(\\"comments\\")
}

model Star {
	id                     Int                      @id @default(autoincrement())
	decimal                Decimal                  @db.Decimal(10, 20)
	postId                 Int?
	post                   Post                     @relation(fields: [postId], references: [id])
	createdAt              DateTime                 @default(now())
	updatedAt              DateTime                 @updatedAt @db.Date(6)
	@@index([mixin, index])
	location               Unsupported(\\"polygon\\")?
	@@unique([A, B], map: \\"_AB_unique\\")
	// Block level comments?
	@@index([wow], map: \\"_B_index\\")
	@@map(\\"Group\\")
	@@fulltext([location, decimal])
}"
`;
